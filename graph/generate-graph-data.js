// Generated by CoffeeScript 1.12.7

/*
Generate preformatted data of commits graph.
 */
var Node, generateGraphData, remove;
const debug = require('debug')('tre-revisions-view:graph')

generateGraphData = function(commits) {
  /*
  Generate graph data.
  
  :param commits: a list of commit, which should have
    `sha`, `parents` properties.
  :returns: data nodes, a json list of
    [
      sha,
      [offset, branch], //dot
      [
      [from, to, branch],  // route 1
      [from, to, branch],  // route 2
      [from, to, branch],
      ]  // routes
    ],  // node
   */
  var b, branch, branchIndex, branches, commit, getBranch, i, j, k, l, len, len1, len2, len3, len4, m, n, node, nodes, numParents, offset, otherBranch, ref, ref1, reserve, routes;
  nodes = [];
  branchIndex = [0];
  reserve = [];
  branches = {};
  getBranch = function(sha) {
    if (branches[sha] == null) {
      branches[sha] = branchIndex[0];
      reserve.push(branchIndex[0]);
      branchIndex[0]++;
    }
    return branches[sha];
  };
  for (j = 0, len = commits.length; j < len; j++) {
    commit = commits[j];

    debug('commit %o', commit)

    branch = getBranch(commit.sha);
    debug('branch %s', branch)
    
    numParents = commit.parents.length;
    offset = reserve.indexOf(branch);
    routes = [];
    if (numParents === 1) {
      if (branches[commit.parents[0]] != null) {
        debug('parent branch exists')
        ref = reserve.slice(offset + 1);
        for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
          b = ref[i];
          routes.push([i + offset + 1, i + offset + 1 - 1, b]);
        }
        ref1 = reserve.slice(0, offset);
        for (i = l = 0, len2 = ref1.length; l < len2; i = ++l) {
          b = ref1[i];
          routes.push([i, i, b]);
        }
        remove(reserve, branch);
        routes.push([offset, reserve.indexOf(branches[commit.parents[0]]), branch]);
      } else {
        debug('parent branch does not exists')
        for (i = m = 0, len3 = reserve.length; m < len3; i = ++m) {
          b = reserve[i];
          routes.push([i, i, b]);
        }
        branches[commit.parents[0]] = branch;
      }
    } else if (numParents === 2) {
      branches[commit.parents[0]] = branch;
      for (i = n = 0, len4 = reserve.length; n < len4; i = ++n) {
        b = reserve[i];
        routes.push([i, i, b]);
      }
      otherBranch = getBranch(commit.parents[1]);
      routes.push([offset, reserve.indexOf(otherBranch), otherBranch]);
    }
    node = Node(commit.sha, offset, branch, routes);
    nodes.push(node);
  }
  return nodes;
};

remove = function(list, item) {
  list.splice(list.indexOf(item), 1);
  return list;
};

Node = function(sha, offset, branch, routes) {
  return [sha, [offset, branch], routes];
};

module.exports = generateGraphData;
